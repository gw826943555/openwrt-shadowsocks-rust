#!/bin/sh /etc/rc.common
#
# Copyright (C) 2017-2019 Yousong Zhou <yszhou4tech@gmail.com>
# Copyright (C) 2024 Anya Lin <hukk1996@gmail.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

USE_PROCD=1
START=99

ss_confdir=/var/etc/shadowsocks-rust

ss_start_node() {
	local disabled server server_port method password
	config_get_bool disabled "$1" 'disabled' 0
	[ $disabled -gt 0 ] && return 0

	config_get server "$1" 'server'
	config_get server_port "$1" 'server_port'
	config_get method "$1" 'method'
	config_get password "$1" 'password'

	# We use ip to avoid the case that DNS queries are also forwarded
	server="$(echo $server | tr ' ' '\n' | xargs -n 1 resolveip | sort -u)"
	if [ -z "$server" ]; then
		logger -st sslocal[$$] -p4 "Resolve remote server ip failed, drop this server"
		return 0
	fi
	json_add_object
	json_add_string 'server' "$server"
	json_add_int 'server_port' "$server_port"
	json_add_string 'method' "$method"
	json_add_string 'password' "$password"
	json_close_object
}

ss_start_local() {
	local disabled protocol local_address local_port mode
	config_get_bool disabled "$1" 'disabled' 0
	[ $disabled -gt 0 ] && return 0

	config_get protocol "$1" 'protocol'
	config_get local_address "$1" 'local_address'
	config_get local_port "$1" 'local_port'
	config_get mode "$1" 'mode'

	local tcp_redir
	if [ "$protocol" = 'redir' ]; then
		config_get tcp_redir "$1" 'tcp_redir'
	fi

	local local_dns_address local_dns_port
	local remote_dns_address remote_dns_port
	local client_cache_size
	if [ "$protocol" = 'dns' ]; then
		config_get local_dns_address "$1" 'local_dns_address'
		config_get local_dns_port "$1" 'local_dns_port'
		config_get remote_dns_address "$1" 'remote_dns_address'
		config_get remote_dns_port "$1" 'remote_dns_port'
		config_get client_cache_size "$1" 'client_cache_size'
	fi

	json_add_object
	json_add_string 'protocol' "$protocol"
	json_add_string 'local_address' "$local_address"
	json_add_int 'local_port' "$local_port"
	json_add_string 'mode' "$mode"
	[ -z "$tcp_redir" ] || json_add_string 'tcp_redir' "$tcp_redir"
	[ -z "$local_dns_address" ] || json_add_string 'local_dns_address' "$local_dns_address"
	[ -z "$local_dns_port" ] || json_add_int 'local_dns_port' "$local_dns_port"
	[ -z "$remote_dns_address" ] || json_add_string 'remote_dns_address' "$remote_dns_address"
	[ -z "$remote_dns_port" ] || json_add_int 'remote_dns_port' "$remote_dns_port"
	[ -z "$client_cache_size" ] || json_add_int 'client_cache_size' "$client_cache_size"
	json_close_object
}

start_service() {
	mkdir -p "$ss_confdir"
	config_load shadowsocks-rust

	local verbose outbound_fwmark
	config_get_bool verbose "global" "verbose" "0"
	config_get outbound_fwmark "global" "outbound_fwmark" "255"

	json_init
	json_add_int 'outbound_fwmark' "$outbound_fwmark"
	json_add_array 'locals'
	config_foreach ss_start_local ss_local
	json_close_array
	json_add_array 'servers'
	config_foreach ss_start_node ss_node
	json_close_array
	json_dump -i >"$ss_confdir/ss_local.json"
	json_cleanup

	procd_open_instance "sslocal"
	procd_set_param command "sslocal" -c "$ss_confdir/ss_local.json"
	[ "$verbose" = 0 ] || procd_append_param command -v
	procd_set_param file "$ss_confdir/ss_local.json"
	procd_set_param limits core="unlimited"
	procd_set_param limits nofile="1000000 1000000"
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_close_instance
	#ss_rules
}

stop_service() {
	rm -rf "$ss_confdir"
}

service_triggers() {
	procd_add_interface_trigger wan
	procd_add_reload_trigger shadowsocks-rust
}

reload_service() {
	stop
	start
}